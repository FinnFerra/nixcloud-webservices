{ config, pkgs, lib, options, wsName, mkUnique, ... }:

# BUG: untested code
# https://wiki.archlinux.org/index.php/lighttpd

with lib;

{
  options.webserver.lighttpd = {
    # FIXME: add package as in apache
    mod_userdir = mkOption {
      default = false;
      type = types.bool;
      description = ''
        If true, requests in the form /~user/page.html are rewritten to take
        the file public_html/page.html from the home directory of the user.
      '';
    };

    enableModules = mkOption {
      type = types.listOf types.str;
      default = [ ];
      example = [ "mod_cgi" "mod_status" ];
      description = ''
        List of lighttpd modules to enable. Sub-services take care of
        enabling modules as needed, so this option is mainly for when you
        want to add custom stuff to
        <option>services.lighttpd.extraConfig</option> that depends on a
        certain module.
      '';
    };

    mod_status = mkOption {
      default = false;
      type = types.bool;
      description = ''
        Show server status overview at /server-status, statistics at
        /server-statistics and list of loaded modules at /server-config.
      '';
    };

    configText = mkOption {
      default = "";
      type = types.lines;
      example = ''...verbatim config file contents...'';
      description = ''
        Overridable config file contents to use for lighttpd. By default, use
        the contents automatically generated by NixOS.
      '';
    };

    extraConfig = mkOption {
      default = "";
      type = types.lines;
      description = ''
        These configuration lines will be appended to the generated lighttpd
        config file. Note that this mechanism does not work when the manual
        <option>configText</option> option is used.
      '';
    };

    extraServiceDependencies = mkOption {
      type = types.listOf types.str;
      default = [ ];
      example = [ "postgresql.service" ];
      description = "Makes it easy to replace postgresql by mysql and depend on the service before we start the webservice.";
    };
  };

  config = let
    # List of known lighttpd modules, ordered by how the lighttpd documentation
    # recommends them being imported:
    # http://redmine.lighttpd.net/projects/1/wiki/Server_modulesDetails
    #
    # Some modules are always imported and should not appear in the config:
    # disallowedModules = [ "mod_indexfile" "mod_dirlisting" "mod_staticfile" ];
    #
    # Get full module list: "ls -1 $lighttpd/lib/*.so"
    allKnownModules = [
      "mod_rewrite"
      "mod_redirect"
      "mod_alias"
      "mod_access"
      "mod_auth"
      "mod_status"
      "mod_simple_vhost"
      "mod_evhost"
      "mod_userdir"
      "mod_secdownload"
      "mod_fastcgi"
      "mod_proxy"
      "mod_cgi"
      "mod_ssi"
      "mod_compress"
      "mod_usertrack"
      "mod_expire"
      "mod_rrdtool"
      "mod_accesslog"
      # Remaining list of modules, order assumed to be unimportant.
      "mod_cml"
      "mod_dirlisting"
      "mod_evasive"
      "mod_extforward"
      "mod_flv_streaming"
      "mod_magnet"
      "mod_mysql_vhost"
      "mod_scgi"
      "mod_setenv"
      "mod_trigger_b4_dl"
      "mod_webdav"
    ];
  in mkIf (config.webserver.variant == "lighttpd" && config.enable) {

    toplevel.assertions = singleton {
      assertion = all (flip elem allKnownModules) config.webserver.lighttpd.enableModules;
      message = ''

        One (or more) modules in `${config.uniqueName}` are unrecognized.

        Known modules: ${toString allKnownModules}

        nixcloud.webservices.${config.uniqueName}.enableModules: ${toString config.webserver.enableModules}
      '';
    };

    directories.log = {
      permissions.defaultDirectoryMode = "0750";
      permissions.others.noAccess = true;
      owner = mkUnique config.webserver.user;
      group = mkUnique config.webserver.group;
      instance.before = [ "webserver-init.service" "instance-init.target" ];
    };

    systemd.services.lighttpd = {
      description = "lighttpd HTTPD";
      wantedBy    = [ "multi-user.target" ];
      after = [ "network.target" ] ++ config.webserver.lighttpd.extraServiceDependencies;
      instance.after = [ "database.target" "webserver-init.service" ];
      serviceConfig = let
        modulesIncludeString = concatStringsSep ",\n    "
          (filter (x: x != "") (map maybeModuleString allKnownModules));

        maybeModuleString = moduleName:
          if elem moduleName enableModules then ''"${moduleName}"'' else "";

        enableModules =
          [ (mkIf config.webserver.lighttpd.mod_status "mod_status" )
            (mkIf config.webserver.lighttpd.mod_userdir "mod_userdir" )
            # FIXME: check if we want that at nixcloud....
            # always load mod_accesslog so that we can log to the journal
            "mod_accesslog"
          ] ++ config.webserver.lighttpd.enableModules;

        configFile = pkgs.writeText "lighttpd.conf" ''
          server.port = ${toString config.proxyOptions.port}
          server.username = "${mkUnique config.webserver.user}"
          server.groupname = "${mkUnique config.webserver.group}"

          # As for why all modules are loaded here, instead of having small
          # server.modules += () entries in each sub-service extraConfig snippet,
          # read this:
          #
          #   http://redmine.lighttpd.net/projects/1/wiki/Server_modulesDetails
          #   http://redmine.lighttpd.net/issues/2337
          #
          # Basically, lighttpd doesn't want to load (or even silently ignore) a
          # module for a second time, and there is no way to check if a module has
          # been loaded already. So if two services were to put the same module in
          # server.modules += (), that would break the lighttpd configuration.
          server.modules = (
              ${modulesIncludeString}
          )

          server.accesslog.filename = "${config.stateDir}/log/access.log"
          server.errorlog   = "${config.stateDir}/log/error.log"

          #server.errorlog-use-syslog = "enable"

          mimetype.assign = (
              ".html" => "text/html",
              ".htm" => "text/html",
              ".txt" => "text/plain",
              ".jpg" => "image/jpeg",
              ".png" => "image/png",
              ".css" => "text/css"
              )

          static-file.exclude-extensions = ( ".fcgi", ".php", ".rb", "~", ".inc" )
          index-file.names = ( "index.html" )

          ${if config.webserver.lighttpd.mod_userdir then ''
            userdir.path = "public_html"
          '' else ""}

          ${if config.webserver.lighttpd.mod_status then ''
            status.status-url = "/server-status"
            status.statistics-url = "/server-statistics"
            status.config-url = "/server-config"
          '' else ""}

          ### fastcgi module
          # read fastcgi.txt for more info
          # for PHP don't forget to set cgi.fix_pathinfo = 1 in the php.ini
          # ... and PHP_FCGI_MAX_REQUESTS = 0 environment variable in system properties
          #               fastcgi.server             = ( ".php" =>
          #                                            ( "localhost" =>
          #                                              (
          #                                                "host" => "127.0.0.1",
          #                                                "port" => 9123
          #                                              )
          #                                            )
          #                                          )
          #               fastcgi.server = ( ".php" => ((
          #                 "socket"   => "/var/run/phpfpm/mypool.sock",
          #                 "bin-path" => "${pkgs.php}/bin/php-cgi"
          #               )))


          fastcgi.server += ( ".php" =>
            ((
              "socket" => "/var/run/phpfpm/mypool.sock",
              "broken-scriptfilename" => "enable"
            ))
          )
          ## map multiple extensions to the same fastcgi server
          fastcgi.map-extensions     = ( ".php3" => ".php",
                                         ".php4" => ".php",
                                         ".php5" => ".php",
                                         ".phps" => ".php",
                                         ".phtml" => ".php" )

          ${config.webserver.lighttpd.extraConfig}
        '';
      in {
        ExecStart = "${pkgs.lighttpd}/sbin/lighttpd -D -f ${configFile}";
        # SIGINT => graceful shutdown
        KillSignal = "SIGINT";
        PIDFile = "${config.runtimeDir}/lighttpd.pid";

        Restart = "always";
        RestartSec = "10s";
        StartLimitInterval = "1min";
        User = config.webserver.user;
        Group = config.webserver.group;
        PermissionsStartOnly = true;
        PrivateTmp = config.webserver.privateTmp;
      };
    };
  };
}
