#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p python3 --argstr # noqa
import os

# The 0 character is not allowed in Nix strings, so we don't need to handle it.
ESC_CHARS = list(range(1, 33)) + [46, 92] + list(range(127, 256))

# Special escapes that can be used in Nix strings.
# Note that we don't need to include '$' here, because we're only matching on a
# single character.
SPECIAL_MATCHES = {
    b'"': br'\"',
    b'\n': br'\n',
    b'\r': br'\r',
    b'\t': br'\t',
    b'\\': b'\\\\',
}

# These shouldn't be escaped with decimal escapes, so only prepend a backslash.
SPECIAL_REPLACES = {
    46: br'\\.',  # dot
    92: br'\\\\'  # backslash
}


def mkescape(num):
    """
    Turn the given integer value into a tuple of a match value (as a Nix
    expression string without quotes) and a replace value (also Nix expression
    string).
    """
    val = bytes([num])
    match = SPECIAL_MATCHES.get(val, val)
    replace = SPECIAL_REPLACES.get(num, br'\\' + str(num).zfill(3).encode())
    return (match, replace)


def gen_table(symbols):
    """
    Generate a table with 9 blocks of symbols separated by a tab character.
    """
    out = b"\t"
    for n, symbol in enumerate(symbols):
        if n % 9 == 0 and n > 0:
            out += b"\n\t"
        out += b'"' + symbol + b'"'
        if (n + 1) % 9 != 0 and n != len(symbols) - 1:
            out += b"\t"
    return out + b"\n"


if __name__ == '__main__':
    matches, replaces = zip(*map(mkescape, ESC_CHARS))

    desc = b"# vi:ts=8:\n" \
           b"# Autogenerated by generate.py, DO NOT EDIT!\n" \
           b"# Escape char according to " \
           b"https://tools.ietf.org/html/rfc4343#section-2.1\n#\n" \
           b"# This file only contains the escaping tables so the actual " \
           b"escape function\n# needs to be provided to allow for both " \
           b"escaping and unescaping.\n"

    exprs = b"f: f [\n"
    exprs += gen_table(matches)
    exprs += b"] [\n"
    exprs += gen_table(replaces)
    exprs += b"]\n"

    curdir = os.path.dirname(os.path.realpath(__file__))
    outfile = os.path.join(curdir, 'default.nix')
    open(outfile, 'wb').write(desc + exprs)
